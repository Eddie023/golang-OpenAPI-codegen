// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eddie023/wex-tag/pkg/api (interfaces: TransactionService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_transaction.go -package=mocks . TransactionService
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ent "github.com/eddie023/wex-tag/ent"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionService is a mock of TransactionService interface.
type MockTransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceMockRecorder
}

// MockTransactionServiceMockRecorder is the mock recorder for MockTransactionService.
type MockTransactionServiceMockRecorder struct {
	mock *MockTransactionService
}

// NewMockTransactionService creates a new mock instance.
func NewMockTransactionService(ctrl *gomock.Controller) *MockTransactionService {
	mock := &MockTransactionService{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionService) EXPECT() *MockTransactionServiceMockRecorder {
	return m.recorder
}

// CreatePurchase mocks base method.
func (m *MockTransactionService) CreatePurchase(arg0 context.Context) (*ent.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePurchase", arg0)
	ret0, _ := ret[0].(*ent.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePurchase indicates an expected call of CreatePurchase.
func (mr *MockTransactionServiceMockRecorder) CreatePurchase(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePurchase", reflect.TypeOf((*MockTransactionService)(nil).CreatePurchase), arg0)
}
