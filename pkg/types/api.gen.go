// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package types

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Transaction defines model for Transaction.
type Transaction struct {
	AmountInUSD string    `json:"amountInUSD"`
	Date        time.Time `json:"date"`
	Description string    `json:"description"`
	Id          string    `json:"id"`
}

// GetPurchaseTransaction defines model for GetPurchaseTransaction.
type GetPurchaseTransaction struct {
	ConvertedPurchasePrice struct {
		Amount           string `json:"amount"`
		Country          string `json:"country"`
		Currency         string `json:"currency"`
		ExchangeRateDate string `json:"exchangeRateDate"`
		ExchangeRateUsed string `json:"exchangeRateUsed"`
	} `json:"convertedPurchasePrice"`
	Description           string `json:"description"`
	OriginalPurchasePrice struct {
		Amount   string `json:"amount"`
		Currency string `json:"currency"`
	} `json:"originalPurchasePrice"`
	Transaction struct {
		Date string `json:"date"`
		Id   string `json:"id"`
	} `json:"transaction"`
}

// CreateNewPurchaseTransaction defines model for CreateNewPurchaseTransaction.
type CreateNewPurchaseTransaction struct {
	Amount      string `json:"amount"`
	Description string `json:"description"`
}

// PostPurchaseTransactionJSONBody defines parameters for PostPurchaseTransaction.
type PostPurchaseTransactionJSONBody struct {
	Amount      string `json:"amount"`
	Description string `json:"description"`
}

// GetPurchaseTransactionParams defines parameters for GetPurchaseTransaction.
type GetPurchaseTransactionParams struct {
	// Country country for which purchase amount should be retrived
	Country string `form:"country" json:"country"`

	// Currency currency for which purchase transaction should be converted to
	Currency string `form:"currency" json:"currency"`
}

// PostPurchaseTransactionJSONRequestBody defines body for PostPurchaseTransaction for application/json ContentType.
type PostPurchaseTransactionJSONRequestBody PostPurchaseTransactionJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostPurchaseTransactionWithBody request with any body
	PostPurchaseTransactionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPurchaseTransaction(ctx context.Context, body PostPurchaseTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPurchaseTransaction request
	GetPurchaseTransaction(ctx context.Context, transactionId string, params *GetPurchaseTransactionParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostPurchaseTransactionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPurchaseTransactionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPurchaseTransaction(ctx context.Context, body PostPurchaseTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPurchaseTransactionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPurchaseTransaction(ctx context.Context, transactionId string, params *GetPurchaseTransactionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPurchaseTransactionRequest(c.Server, transactionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostPurchaseTransactionRequest calls the generic PostPurchaseTransaction builder with application/json body
func NewPostPurchaseTransactionRequest(server string, body PostPurchaseTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPurchaseTransactionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPurchaseTransactionRequestWithBody generates requests for PostPurchaseTransaction with any type of body
func NewPostPurchaseTransactionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transaction")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPurchaseTransactionRequest generates requests for GetPurchaseTransaction
func NewGetPurchaseTransactionRequest(server string, transactionId string, params *GetPurchaseTransactionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transaction/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country", runtime.ParamLocationQuery, params.Country); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "currency", runtime.ParamLocationQuery, params.Currency); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostPurchaseTransactionWithBodyWithResponse request with any body
	PostPurchaseTransactionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPurchaseTransactionResponse, error)

	PostPurchaseTransactionWithResponse(ctx context.Context, body PostPurchaseTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPurchaseTransactionResponse, error)

	// GetPurchaseTransactionWithResponse request
	GetPurchaseTransactionWithResponse(ctx context.Context, transactionId string, params *GetPurchaseTransactionParams, reqEditors ...RequestEditorFn) (*GetPurchaseTransactionResponse, error)
}

type PostPurchaseTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPurchaseTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPurchaseTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPurchaseTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetPurchaseTransaction
}

// Status returns HTTPResponse.Status
func (r GetPurchaseTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPurchaseTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostPurchaseTransactionWithBodyWithResponse request with arbitrary body returning *PostPurchaseTransactionResponse
func (c *ClientWithResponses) PostPurchaseTransactionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPurchaseTransactionResponse, error) {
	rsp, err := c.PostPurchaseTransactionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPurchaseTransactionResponse(rsp)
}

func (c *ClientWithResponses) PostPurchaseTransactionWithResponse(ctx context.Context, body PostPurchaseTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPurchaseTransactionResponse, error) {
	rsp, err := c.PostPurchaseTransaction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPurchaseTransactionResponse(rsp)
}

// GetPurchaseTransactionWithResponse request returning *GetPurchaseTransactionResponse
func (c *ClientWithResponses) GetPurchaseTransactionWithResponse(ctx context.Context, transactionId string, params *GetPurchaseTransactionParams, reqEditors ...RequestEditorFn) (*GetPurchaseTransactionResponse, error) {
	rsp, err := c.GetPurchaseTransaction(ctx, transactionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPurchaseTransactionResponse(rsp)
}

// ParsePostPurchaseTransactionResponse parses an HTTP response from a PostPurchaseTransactionWithResponse call
func ParsePostPurchaseTransactionResponse(rsp *http.Response) (*PostPurchaseTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPurchaseTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPurchaseTransactionResponse parses an HTTP response from a GetPurchaseTransactionWithResponse call
func ParseGetPurchaseTransactionResponse(rsp *http.Response) (*GetPurchaseTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPurchaseTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetPurchaseTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create Purchase Transaction
	// (POST /transaction)
	PostPurchaseTransaction(w http.ResponseWriter, r *http.Request)
	// Get Purchase Transaction
	// (GET /transaction/{transactionId})
	GetPurchaseTransaction(w http.ResponseWriter, r *http.Request, transactionId string, params GetPurchaseTransactionParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Create Purchase Transaction
// (POST /transaction)
func (_ Unimplemented) PostPurchaseTransaction(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Purchase Transaction
// (GET /transaction/{transactionId})
func (_ Unimplemented) GetPurchaseTransaction(w http.ResponseWriter, r *http.Request, transactionId string, params GetPurchaseTransactionParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostPurchaseTransaction operation middleware
func (siw *ServerInterfaceWrapper) PostPurchaseTransaction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostPurchaseTransaction(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPurchaseTransaction operation middleware
func (siw *ServerInterfaceWrapper) GetPurchaseTransaction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "transactionId" -------------
	var transactionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, chi.URLParam(r, "transactionId"), &transactionId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "transactionId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPurchaseTransactionParams

	// ------------- Required query parameter "country" -------------

	if paramValue := r.URL.Query().Get("country"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "country"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "country", r.URL.Query(), &params.Country)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "country", Err: err})
		return
	}

	// ------------- Required query parameter "currency" -------------

	if paramValue := r.URL.Query().Get("currency"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "currency"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "currency", r.URL.Query(), &params.Currency)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "currency", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPurchaseTransaction(w, r, transactionId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/transaction", wrapper.PostPurchaseTransaction)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/transaction/{transactionId}", wrapper.GetPurchaseTransaction)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWTY/bNhD9KwTbozeWtf6QfWrSBMECRbtIN2iBNIeROJIoSyRNUrLlYP97Qcpa22t7",
	"601zs0nxcebNm8f5RhNZKSlQWEMX36jGVY3GvpOMo1/4VSNY/B3X97VOcjD4oEEYSCyXwu0nUlgU1v0E",
	"pUqegNsZFqbbNkmOFbhfSkuF2u5goZJ1d8q2CumCGqu5yOiAbm6MlarkWe63OaMLOkvjMpnVrFlLAfTx",
	"cUAZmkRz1UdRweY3FJnN6WISDK7CnGw2ZhnOsChGYUUfHahLnmtkdPHl6IJBH+7XJ2gZF5hYd6w7aJQU",
	"pkvtI9ofy1UiRYPaIuth7zVP8P9yCqtwhHY0XUIYc89p4o7r9lqAYB3mm9EEonUwnnUAtdYokqsRVlHB",
	"WBJLnAdF6xFwk+QgMvwEFt+DxWuRxna0GiFYY2ahOUH6bFxNr0Nqo82a81Rkm2bcnMqi5+gg2TN3PQnm",
	"TEYnGjofhy2ieDwvqrAtl+Kc5K9JRk/GAUxu18WGTRoPIjXPuIDyh0qpWEW2zRueB9U8+i4lKKx0EtWj",
	"bQxwjvU915c68QIBcTHbFE0VhKIsfGT2uCWP02avkNwEIJ1M47lkYb710Pxqkc2mk2gSCqWm4609TZc7",
	"BbFXiCXaLossHs3mUTbP/8vLzkvgmJnBJdM554DPpHnBAMmalyXRaGstSL9PDj9gaIGXhsRgkJFUapLx",
	"BgXZ9RwBwciTEty1nWH6yj28VNZOM3fi85/v3d9U6gosXVAm67j0qV9Rs+U2vIVIrfN2DF29e7Xs8cDi",
	"jeXVtZAzOZ1PRCWWUtjie3tcsaQxPJ2uy3ZiLurwssQGR/Qch+CqzW3pcB6O1HGNKOsqN9slLEe23foH",
	"1oUmUtm/hJD4b7ECXtIFrUBwk4e3SQ51CRlw8Uvmtt4ksqIDKqByNyJjHIPwlp6o7g+Fgry9vyNGYcLT",
	"3ePqZfTXh7/Jw9uP5EDh/ku6T2+NmxsL2c1xEzSoTYc+ehO4K6VCAYrTBb1945YGVIHNvciGz51FGp+f",
	"E6IP5c6Rci/N2elgcDB5edf8WWNKF/Sn4X4+Gx4NZ8MXJ7PnQ0kYjLzBHVHWIbCul+qqAvf471bPtuiF",
	"Sss2W003TaRzztrOEQ7ZGH47+HPHHt25DO1pPO9849dKCqL62w+OGqI0NlzWpmyJqeOKW4vM24KxUiMb",
	"OHvRHBskNsfd4gWoJ38jVvauwtEQUysl/XrcepQHjWBq3ZJP6Da4yIh7yw2RKfmwe9y9mrxt/SN8+O5g",
	"//IT7eh09zbo5eg2Xes5BPf7KUCeEmiAl9C50rFyLoyVToEaKrSoDV18eU5p753u3nXOk3x/W9f2xOSy",
	"LhmJsSOv8eMLd2dXNfpJZ9d6+9FnbyRW1zg4GFxPTOcknp1/nwvosD33UR0W6lJk+/Hg+tC+nnRIcLnv",
	"dt8NLxThcUDHwfhU0Ievm5CWpLIWz9vtI9rX9NpEtGNEU4RBYrqx/cX6H3LK2e757cTtDOq5JfYEO1fb",
	"83vUvq8j2eeKuumjq7Xz+txatRgOS5lAmUtjF1EQBNSV5FzK69VyJKfzuoDb1I2X/wYAAP//wi8LDrQO",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
